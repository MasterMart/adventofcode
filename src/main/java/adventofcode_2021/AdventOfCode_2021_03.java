package adventofcode_2021;


import utils.AdventOfCodeUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class AdventOfCode_2021_03 {

	static String input = "000111111001\n" +
			"111011110110\n" +
			"101111111000\n" +
			"111100100110\n" +
			"001111011000\n" +
			"011100010110\n" +
			"000101001001\n" +
			"100001100101\n" +
			"000011111100\n" +
			"110000101000\n" +
			"011110110101\n" +
			"011000111100\n" +
			"011000001011\n" +
			"010111101101\n" +
			"011111100010\n" +
			"100110001111\n" +
			"100111100100\n" +
			"111110010100\n" +
			"101001001110\n" +
			"110101111110\n" +
			"110110100000\n" +
			"001010001110\n" +
			"101100001100\n" +
			"111001011000\n" +
			"100101111111\n" +
			"001001010100\n" +
			"100111011000\n" +
			"100101100000\n" +
			"010001010101\n" +
			"000111001100\n" +
			"001100011110\n" +
			"101100010101\n" +
			"111011000011\n" +
			"010000001110\n" +
			"110000000110\n" +
			"001010110000\n" +
			"100011001111\n" +
			"110100111101\n" +
			"111111010100\n" +
			"000101110111\n" +
			"011110101111\n" +
			"100110000110\n" +
			"010011000000\n" +
			"000110010000\n" +
			"101101101011\n" +
			"011101100011\n" +
			"011111101001\n" +
			"100101111011\n" +
			"100010101010\n" +
			"010000011011\n" +
			"100110101011\n" +
			"010110000010\n" +
			"110101010000\n" +
			"001000101100\n" +
			"101000001000\n" +
			"000110111110\n" +
			"001000111001\n" +
			"110000011001\n" +
			"011101001010\n" +
			"101011100011\n" +
			"111010010010\n" +
			"111100110111\n" +
			"011110100001\n" +
			"101111111111\n" +
			"011100001001\n" +
			"000011100100\n" +
			"100010101001\n" +
			"101101000100\n" +
			"010110111110\n" +
			"111001001011\n" +
			"010110010001\n" +
			"100110001110\n" +
			"110101100111\n" +
			"110010111110\n" +
			"000011101010\n" +
			"100110000101\n" +
			"011100000111\n" +
			"001100100011\n" +
			"001001011101\n" +
			"111111101001\n" +
			"110110000000\n" +
			"001101100000\n" +
			"111101100110\n" +
			"011110100011\n" +
			"001011010111\n" +
			"000001010100\n" +
			"100111000110\n" +
			"111000101111\n" +
			"111010100011\n" +
			"101101011011\n" +
			"010110010011\n" +
			"010110111111\n" +
			"100011011000\n" +
			"001010111101\n" +
			"100100110010\n" +
			"110001100000\n" +
			"010111011111\n" +
			"000011111111\n" +
			"010110000011\n" +
			"010100000001\n" +
			"111110011100\n" +
			"110110110001\n" +
			"000110001010\n" +
			"101100101110\n" +
			"110010011111\n" +
			"101101110011\n" +
			"000110011101\n" +
			"101101111010\n" +
			"101110111011\n" +
			"100000000011\n" +
			"010110010111\n" +
			"010001111001\n" +
			"100001110011\n" +
			"011011111011\n" +
			"101101010011\n" +
			"010100101111\n" +
			"001001000000\n" +
			"100110101000\n" +
			"000101100010\n" +
			"011110000001\n" +
			"000011101011\n" +
			"110111110101\n" +
			"010110100100\n" +
			"010001011101\n" +
			"110101001010\n" +
			"011010011011\n" +
			"110001110011\n" +
			"011001011011\n" +
			"100101110010\n" +
			"111110000101\n" +
			"100001100011\n" +
			"010100000011\n" +
			"111101101001\n" +
			"101111101001\n" +
			"001111011101\n" +
			"100011101111\n" +
			"100100000001\n" +
			"010101101111\n" +
			"110000110001\n" +
			"000000101011\n" +
			"011000011110\n" +
			"110111100010\n" +
			"110010101110\n" +
			"010110100111\n" +
			"101011010000\n" +
			"101011100010\n" +
			"100010111000\n" +
			"000000001110\n" +
			"010010001001\n" +
			"001011010010\n" +
			"100011001101\n" +
			"110110100001\n" +
			"011110111000\n" +
			"000110101010\n" +
			"010010111011\n" +
			"011111100101\n" +
			"010101111011\n" +
			"100011010100\n" +
			"100000111010\n" +
			"010011001101\n" +
			"100010100111\n" +
			"111111100010\n" +
			"111100001111\n" +
			"111010001101\n" +
			"100011000001\n" +
			"111001101011\n" +
			"111110010011\n" +
			"010100001010\n" +
			"101001111100\n" +
			"101010111110\n" +
			"010110110010\n" +
			"000011111101\n" +
			"010011100000\n" +
			"010001100111\n" +
			"110111010100\n" +
			"111101100000\n" +
			"001101101111\n" +
			"110110000101\n" +
			"111110110101\n" +
			"010011100101\n" +
			"000011000101\n" +
			"011010001010\n" +
			"000111000011\n" +
			"000011000110\n" +
			"101010001000\n" +
			"101011110111\n" +
			"011010010011\n" +
			"011111000001\n" +
			"011101011010\n" +
			"001011001001\n" +
			"001100110010\n" +
			"010011111001\n" +
			"010101111000\n" +
			"010000111101\n" +
			"011100110000\n" +
			"101100000011\n" +
			"000111100110\n" +
			"011001110110\n" +
			"111000100001\n" +
			"110010001010\n" +
			"010000000011\n" +
			"110110110111\n" +
			"111110111100\n" +
			"010001101000\n" +
			"000001100011\n" +
			"111001001101\n" +
			"010111101011\n" +
			"001110000010\n" +
			"100011100010\n" +
			"001011010000\n" +
			"010000001011\n" +
			"011100011010\n" +
			"010100001001\n" +
			"100110011111\n" +
			"011110010011\n" +
			"010100011101\n" +
			"001111110100\n" +
			"100001100111\n" +
			"111110100010\n" +
			"000111110001\n" +
			"011100011001\n" +
			"000101010101\n" +
			"101000000100\n" +
			"101010110001\n" +
			"111101000101\n" +
			"000110000010\n" +
			"100101001010\n" +
			"101001111101\n" +
			"111010011001\n" +
			"101100101111\n" +
			"101010101001\n" +
			"110101001101\n" +
			"111000101010\n" +
			"001101010111\n" +
			"001111111011\n" +
			"001101011101\n" +
			"011101000101\n" +
			"100100100010\n" +
			"111100010011\n" +
			"101111101010\n" +
			"101011001100\n" +
			"101101111011\n" +
			"101110011000\n" +
			"111100001001\n" +
			"011111001010\n" +
			"010110011010\n" +
			"010111101111\n" +
			"010101001101\n" +
			"111011000101\n" +
			"110010011110\n" +
			"111101011001\n" +
			"111101000100\n" +
			"000010001101\n" +
			"000010011110\n" +
			"001111000001\n" +
			"110110111011\n" +
			"100001001011\n" +
			"100111110110\n" +
			"011110100010\n" +
			"011001110100\n" +
			"010001010010\n" +
			"111111011000\n" +
			"000110111011\n" +
			"001100001010\n" +
			"001110000101\n" +
			"001110101100\n" +
			"010100111001\n" +
			"011101000111\n" +
			"001001011001\n" +
			"101111000110\n" +
			"111011011011\n" +
			"000010010100\n" +
			"100101011101\n" +
			"111110011011\n" +
			"101000101111\n" +
			"010110001111\n" +
			"000010101100\n" +
			"110011011001\n" +
			"011001010100\n" +
			"010010010011\n" +
			"100000000010\n" +
			"100110100101\n" +
			"010011000110\n" +
			"111010110111\n" +
			"001100101000\n" +
			"010110000100\n" +
			"001011011110\n" +
			"001001111101\n" +
			"111001101010\n" +
			"110101001111\n" +
			"101111100000\n" +
			"001100000110\n" +
			"011111100110\n" +
			"100000001000\n" +
			"101010001001\n" +
			"010101110011\n" +
			"011011001111\n" +
			"000000111000\n" +
			"100100011011\n" +
			"101100110001\n" +
			"110111000000\n" +
			"101100111000\n" +
			"010010010101\n" +
			"111011000001\n" +
			"000000000101\n" +
			"010111000001\n" +
			"110000010101\n" +
			"010010101111\n" +
			"101001110010\n" +
			"011111000010\n" +
			"001011100001\n" +
			"101111000010\n" +
			"001110101101\n" +
			"111110100101\n" +
			"111011001101\n" +
			"100011001100\n" +
			"010011010110\n" +
			"010001111000\n" +
			"110010011011\n" +
			"001100011000\n" +
			"110011000000\n" +
			"000000000001\n" +
			"100111111011\n" +
			"000111000110\n" +
			"010110101110\n" +
			"101110110100\n" +
			"010100110110\n" +
			"100011010110\n" +
			"010100001101\n" +
			"111110010110\n" +
			"010000101011\n" +
			"110100110101\n" +
			"001101011000\n" +
			"010101110101\n" +
			"011100110111\n" +
			"000100110111\n" +
			"001110111001\n" +
			"000010000010\n" +
			"100110111001\n" +
			"001011011010\n" +
			"000000010111\n" +
			"101011000001\n" +
			"110110000111\n" +
			"101110001101\n" +
			"000000000111\n" +
			"011000010100\n" +
			"010111111101\n" +
			"111011110011\n" +
			"110100111111\n" +
			"000001010111\n" +
			"101000101101\n" +
			"110100010110\n" +
			"011101101000\n" +
			"100000001011\n" +
			"011000000111\n" +
			"110100010011\n" +
			"011100010010\n" +
			"010110001001\n" +
			"111101111001\n" +
			"101001001010\n" +
			"110000100011\n" +
			"011001101001\n" +
			"010101110100\n" +
			"101000011000\n" +
			"101111100111\n" +
			"010110110100\n" +
			"001000111110\n" +
			"000101000001\n" +
			"111011011110\n" +
			"000101101111\n" +
			"111000110001\n" +
			"010101010100\n" +
			"110001100001\n" +
			"000100010110\n" +
			"010011000100\n" +
			"011011010111\n" +
			"001100010000\n" +
			"000110010111\n" +
			"111111011001\n" +
			"100010011011\n" +
			"100100111101\n" +
			"110100010010\n" +
			"100001110111\n" +
			"100000101011\n" +
			"010001000100\n" +
			"101110100101\n" +
			"000111100001\n" +
			"111001101111\n" +
			"101111011110\n" +
			"001111000011\n" +
			"011011101100\n" +
			"100001010000\n" +
			"000110100110\n" +
			"110111010110\n" +
			"101100010110\n" +
			"101110001001\n" +
			"100011010101\n" +
			"111111010001\n" +
			"011111101000\n" +
			"110111110001\n" +
			"010111000011\n" +
			"001000100101\n" +
			"111101110010\n" +
			"101111010000\n" +
			"010001110101\n" +
			"101011100000\n" +
			"010101101110\n" +
			"100010000100\n" +
			"010100010011\n" +
			"001011111010\n" +
			"110000110110\n" +
			"100001101010\n" +
			"001001100101\n" +
			"111111110101\n" +
			"000011011100\n" +
			"011111010000\n" +
			"101110011110\n" +
			"010011011101\n" +
			"111111000111\n" +
			"010000011101\n" +
			"110011001001\n" +
			"100011101110\n" +
			"111100011011\n" +
			"000110110100\n" +
			"101000000110\n" +
			"100101100001\n" +
			"101100010000\n" +
			"101101011110\n" +
			"010001111110\n" +
			"010101001010\n" +
			"101011111111\n" +
			"100001101110\n" +
			"110000001000\n" +
			"010010011011\n" +
			"111011111011\n" +
			"001101101001\n" +
			"011001010001\n" +
			"110110111110\n" +
			"001111010001\n" +
			"000011001101\n" +
			"110111100100\n" +
			"000111110100\n" +
			"000100111101\n" +
			"011101100111\n" +
			"111001000101\n" +
			"110001111011\n" +
			"110000110010\n" +
			"101000110000\n" +
			"010100000000\n" +
			"101011001110\n" +
			"110111111000\n" +
			"010010000011\n" +
			"100001000111\n" +
			"111111010110\n" +
			"111000010011\n" +
			"010101001111\n" +
			"101001110001\n" +
			"100011011010\n" +
			"001001010101\n" +
			"100111011001\n" +
			"111011010111\n" +
			"001010010100\n" +
			"000101110011\n" +
			"111000101011\n" +
			"011111000000\n" +
			"101001111010\n" +
			"111000000100\n" +
			"010001101101\n" +
			"100000100010\n" +
			"100001010100\n" +
			"110000010011\n" +
			"000000001101\n" +
			"100000011101\n" +
			"011010001100\n" +
			"001101111111\n" +
			"010011011001\n" +
			"011011011101\n" +
			"101001010001\n" +
			"101111110111\n" +
			"100010110011\n" +
			"001000110010\n" +
			"101111001000\n" +
			"001011001100\n" +
			"001110010011\n" +
			"001010001101\n" +
			"110101001001\n" +
			"101100010001\n" +
			"101001110110\n" +
			"000000100000\n" +
			"100011000110\n" +
			"110101000100\n" +
			"001011101010\n" +
			"100000011000\n" +
			"010010011000\n" +
			"000001010011\n" +
			"111110101010\n" +
			"110100111010\n" +
			"010010011110\n" +
			"111111101110\n" +
			"000010111110\n" +
			"000010101110\n" +
			"000110100000\n" +
			"001011000100\n" +
			"010111100011\n" +
			"000111111011\n" +
			"010100001000\n" +
			"001100010111\n" +
			"010111100101\n" +
			"110010010001\n" +
			"101000100001\n" +
			"110111011111\n" +
			"110111100101\n" +
			"000110110000\n" +
			"011110000100\n" +
			"110001001110\n" +
			"111110001001\n" +
			"111100101010\n" +
			"011011100011\n" +
			"110001000000\n" +
			"000000000100\n" +
			"101011011110\n" +
			"000000001010\n" +
			"010110010000\n" +
			"011011010110\n" +
			"101001000101\n" +
			"110101011001\n" +
			"000010000101\n" +
			"111011000111\n" +
			"010111001110\n" +
			"011100011000\n" +
			"001111100001\n" +
			"110101011011\n" +
			"010110110001\n" +
			"101010101101\n" +
			"101100110000\n" +
			"000011101101\n" +
			"000001111111\n" +
			"111101001110\n" +
			"111000111110\n" +
			"100010111001\n" +
			"100010001011\n" +
			"000100101001\n" +
			"011001111110\n" +
			"111001110001\n" +
			"001100110101\n" +
			"011010001001\n" +
			"011000101101\n" +
			"110100001010\n" +
			"100001010101\n" +
			"011000000001\n" +
			"111001001000\n" +
			"100111010001\n" +
			"110000101101\n" +
			"100101000010\n" +
			"100000011001\n" +
			"001100010110\n" +
			"110100000100\n" +
			"100110110010\n" +
			"100100001001\n" +
			"100010101100\n" +
			"101010100110\n" +
			"011000110000\n" +
			"110001000110\n" +
			"011010000000\n" +
			"111111100000\n" +
			"111001001010\n" +
			"101001101110\n" +
			"111000000101\n" +
			"000000010010\n" +
			"011011110001\n" +
			"000011011110\n" +
			"000110110101\n" +
			"101100011011\n" +
			"111111110011\n" +
			"010100010101\n" +
			"111001010110\n" +
			"000001110010\n" +
			"111001101000\n" +
			"111110100000\n" +
			"001001110001\n" +
			"101111111011\n" +
			"101110101010\n" +
			"100100100100\n" +
			"100110110001\n" +
			"100010000010\n" +
			"111101101101\n" +
			"111001101110\n" +
			"110010110011\n" +
			"111110100111\n" +
			"100001111010\n" +
			"110011111011\n" +
			"100100001010\n" +
			"110010110111\n" +
			"001110111100\n" +
			"101011111110\n" +
			"011000111001\n" +
			"000011100111\n" +
			"000111101000\n" +
			"000001111011\n" +
			"100101111001\n" +
			"011100011100\n" +
			"100100111010\n" +
			"111000010101\n" +
			"011101110001\n" +
			"011010000010\n" +
			"001111001010\n" +
			"101001100001\n" +
			"000011101001\n" +
			"010110110011\n" +
			"101000100010\n" +
			"110100111001\n" +
			"111110100001\n" +
			"100010111100\n" +
			"100100111011\n" +
			"000011010010\n" +
			"001100001001\n" +
			"011101100110\n" +
			"001111101111\n" +
			"000110010010\n" +
			"001100001111\n" +
			"100110000100\n" +
			"001111001111\n" +
			"110110100010\n" +
			"001111001000\n" +
			"000010011100\n" +
			"010101101100\n" +
			"010110000101\n" +
			"001101100111\n" +
			"000010110100\n" +
			"100011011100\n" +
			"110010110100\n" +
			"001001100100\n" +
			"001010011011\n" +
			"001000011101\n" +
			"110000111100\n" +
			"110001001010\n" +
			"010101001000\n" +
			"110011101010\n" +
			"001011110111\n" +
			"110100000101\n" +
			"001101011110\n" +
			"111100111000\n" +
			"011111010100\n" +
			"101001001100\n" +
			"110011111000\n" +
			"010010001000\n" +
			"000000100010\n" +
			"101010100111\n" +
			"101010001110\n" +
			"101000000001\n" +
			"010011100111\n" +
			"111000110101\n" +
			"110011011111\n" +
			"000001111000\n" +
			"011000010111\n" +
			"101001011111\n" +
			"011011100000\n" +
			"110000100001\n" +
			"010111000110\n" +
			"001001111111\n" +
			"010111111000\n" +
			"001111110010\n" +
			"111101000111\n" +
			"100101100011\n" +
			"110001111010\n" +
			"101000110110\n" +
			"110000100000\n" +
			"010110001100\n" +
			"110101001000\n" +
			"110100010000\n" +
			"011110000110\n" +
			"100110011000\n" +
			"011001111100\n" +
			"010111111110\n" +
			"001001100001\n" +
			"100110111010\n" +
			"111001110000\n" +
			"010010010110\n" +
			"100111111110\n" +
			"101111101101\n" +
			"001000010001\n" +
			"110001001001\n" +
			"101110010011\n" +
			"001000101010\n" +
			"010001101111\n" +
			"011101101010\n" +
			"100000000101\n" +
			"101000111000\n" +
			"110111110100\n" +
			"111111010011\n" +
			"011101010100\n" +
			"101001111111\n" +
			"101101101000\n" +
			"000011100010\n" +
			"010100011001\n" +
			"000111100010\n" +
			"000100011110\n" +
			"110101101110\n" +
			"010010101010\n" +
			"000010100001\n" +
			"010101100101\n" +
			"000101110000\n" +
			"110101111011\n" +
			"000100011010\n" +
			"110110110101\n" +
			"000101111000\n" +
			"111100100111\n" +
			"011011111110\n" +
			"110111001011\n" +
			"111001110100\n" +
			"010001011000\n" +
			"111001010100\n" +
			"110001111111\n" +
			"111100010101\n" +
			"110110001000\n" +
			"001010010011\n" +
			"110011110010\n" +
			"000000100110\n" +
			"100001111001\n" +
			"010110100101\n" +
			"100010001100\n" +
			"001000010011\n" +
			"001001000100\n" +
			"110110011010\n" +
			"111001111110\n" +
			"101110001011\n" +
			"010000010010\n" +
			"101001101101\n" +
			"001000010000\n" +
			"110011000011\n" +
			"001111101110\n" +
			"110110111000\n" +
			"000101010000\n" +
			"001100111101\n" +
			"000000100101\n" +
			"010111010100\n" +
			"101101101111\n" +
			"110010001000\n" +
			"101001011011\n" +
			"011111110000\n" +
			"001101111011\n" +
			"010110001110\n" +
			"011000001101\n" +
			"001000011111\n" +
			"010011101000\n" +
			"111110111111\n" +
			"011110000101\n" +
			"001011001110\n" +
			"110001001101\n" +
			"100011111111\n" +
			"110100101110\n" +
			"000111010101\n" +
			"101001000010\n" +
			"000011001010\n" +
			"001111110101\n" +
			"110100111000\n" +
			"111010000010\n" +
			"001011001101\n" +
			"110111011110\n" +
			"101100001000\n" +
			"111011101111\n" +
			"101001011101\n" +
			"100001100100\n" +
			"010111000100\n" +
			"101111010100\n" +
			"001111001101\n" +
			"101110110001\n" +
			"011100110100\n" +
			"001101100101\n" +
			"110100011000\n" +
			"110110110100\n" +
			"100010011111\n" +
			"011001001101\n" +
			"000000110001\n" +
			"011010111000\n" +
			"110111111101\n" +
			"100100010011\n" +
			"010011101101\n" +
			"100100110001\n" +
			"110010011001\n" +
			"100110011011\n" +
			"101111100110\n" +
			"100000010011\n" +
			"010111011100\n" +
			"001011000101\n" +
			"110100110010\n" +
			"000111001110\n" +
			"000011011101\n" +
			"000001011010\n" +
			"010010100101\n" +
			"101100100110\n" +
			"100001101111\n" +
			"101011100110\n" +
			"001100001000\n" +
			"001101000010\n" +
			"111111111011\n" +
			"110111010101\n" +
			"111000010100\n" +
			"110011101101\n" +
			"100110010111\n" +
			"001110010100\n" +
			"011010110001\n" +
			"010011110010\n" +
			"011101000000\n" +
			"101001000111\n" +
			"000010101011\n" +
			"110100000111\n" +
			"011101000010\n" +
			"011000111010\n" +
			"110101100000\n" +
			"110100011011\n" +
			"111111100101\n" +
			"000100100001\n" +
			"111100001010\n" +
			"101110111000\n" +
			"011000010010\n" +
			"100001101101\n" +
			"001111101001\n" +
			"111101111100\n" +
			"110100010101\n" +
			"100011111101\n" +
			"101000101010\n" +
			"101010110100\n" +
			"111101100011\n" +
			"000000000010\n" +
			"011001111111\n" +
			"010101011000\n" +
			"001000111111\n" +
			"111010101010\n" +
			"100001111100\n" +
			"001101001000\n" +
			"111100000101\n" +
			"000100011101\n" +
			"010010110110\n" +
			"010100010111\n" +
			"110101010101\n" +
			"000011001111\n" +
			"010010110000\n" +
			"110110111001\n" +
			"010000100000\n" +
			"000000011000\n" +
			"110011011100\n" +
			"010110001010\n" +
			"100001001111\n" +
			"100010011101\n" +
			"111111111101\n" +
			"101100011000\n" +
			"010101000101\n" +
			"111000101101\n" +
			"101000011010\n" +
			"101101000001\n" +
			"111001100001\n" +
			"010001010100\n" +
			"100101110011\n" +
			"010000111111\n" +
			"000110000001\n" +
			"011011000000\n" +
			"111011001100\n" +
			"111001100011\n" +
			"011101001011\n" +
			"001000110000\n" +
			"010010011111\n" +
			"101110001000\n" +
			"011101011011\n" +
			"110010001101\n" +
			"000000111011\n" +
			"001001001111\n" +
			"010100000010\n" +
			"001000111000\n" +
			"111110000110\n" +
			"000010111111\n" +
			"010001100110\n" +
			"011100011111\n" +
			"011101001000\n" +
			"110100000000\n" +
			"110111111100\n" +
			"010010011010\n" +
			"011111000110\n" +
			"001000100111\n" +
			"101011111000\n" +
			"001101110110\n" +
			"100010010101\n" +
			"110000100100\n" +
			"001101110100\n" +
			"111111010111\n" +
			"110011001110\n" +
			"101110100111\n" +
			"111111000010\n" +
			"101110010010\n" +
			"011000000010\n" +
			"001110011001\n" +
			"100110010100\n" +
			"100111111010\n" +
			"110110100100\n" +
			"010101001011\n" +
			"110101011101\n" +
			"001100000011\n" +
			"101110000000\n" +
			"111100011010\n" +
			"010011111110\n" +
			"000110101111\n" +
			"010011001100\n" +
			"101011011111\n" +
			"001101101010\n" +
			"010100110000\n" +
			"010011111010\n" +
			"111110000001\n" +
			"101001101011\n" +
			"000000110111\n" +
			"010000000110\n" +
			"011101011001\n" +
			"100001011111\n" +
			"011110111001\n" +
			"110111110000\n" +
			"011100001000\n" +
			"110000110000\n" +
			"001101111001\n" +
			"111011101010\n" +
			"010000111010\n" +
			"111001000000\n" +
			"011011010000\n" +
			"000001101001\n" +
			"111011001011\n" +
			"010111111011\n" +
			"101000010111\n" +
			"001011010011\n" +
			"101100011111\n" +
			"011111011000\n" +
			"011111100001\n" +
			"101100001010\n" +
			"100111101000\n" +
			"111110110110\n" +
			"011001100011\n" +
			"001111100000\n" +
			"111011001110\n" +
			"100000001101\n" +
			"100010100001\n" +
			"000010100100\n" +
			"111001101001\n" +
			"010100111101\n" +
			"000011001110\n" +
			"101111001100\n" +
			"111010110010\n" +
			"100000100111\n" +
			"000011100101\n" +
			"000100000010\n" +
			"100010011001\n" +
			"010001100011\n" +
			"000011110010\n" +
			"010111011001\n" +
			"011001010000\n" +
			"011011110011\n" +
			"111000100011\n" +
			"011110011101\n" +
			"000000100011\n" +
			"001011100100\n" +
			"001111001100\n" +
			"101100110100\n" +
			"101100110101\n" +
			"001010101111\n" +
			"011000110010\n" +
			"100010100011\n" +
			"000010001100\n" +
			"101101010010\n" +
			"001011011000\n" +
			"100010100010\n" +
			"010010100010\n" +
			"001111101100\n" +
			"001000110111\n" +
			"011111000111\n" +
			"011110111101\n" +
			"011010001011\n" +
			"111101001100\n" +
			"101010110110\n" +
			"010101110010\n" +
			"011001111011\n" +
			"011101110010\n" +
			"001110001111\n" +
			"110111000101\n" +
			"100011110011\n" +
			"001010010000\n" +
			"000101001100\n" +
			"110011100110\n" +
			"000101101010\n" +
			"010111100110\n" +
			"111001111010\n" +
			"001000000100\n" +
			"110111011001\n" +
			"110001011001\n" +
			"100101110001\n" +
			"001010001001\n" +
			"100100111001\n" +
			"001100000010\n" +
			"000001011000\n" +
			"001010100110\n" +
			"000101110101\n" +
			"010101111010\n" +
			"100100110000\n" +
			"110011001010\n" +
			"011001110101";

	public static int countfirst;
	public static int count2;
	public static int count3;
	public static int count4;
	public static int count5;
	public static int count6;
	public static int count7;
	public static int count8;
	public static int count9;
	public static int count10;
	public static int count11;
	public static int count12;

	public static void main(String... args) {
		int total = 0;
		for (int i = 0; i < input.split("\n").length; i++) {
			total ++;
			String str = input.split("\n")[i];

			for (int j = 0; j < str.length(); j++) {
				String s = Character.toString(str.charAt(j));

				if (j == 0 && s.equals("1")) {
					countfirst++;
				}
				if (j == 1 && s.equals("1")) {
					count2++;
				}
				if (j == 2 && s.equals("1")) {
					count3++;
				}
				if (j == 3 && s.equals("1")) {
					count4++;
				}
				if (j == 4 && s.equals("1")) {
					count5++;
				}
				if (j == 5 && s.equals("1")) {
					count6++;
				}
				if (j == 6 && s.equals("1")) {
					count7++;
				}
				if (j == 7 && s.equals("1")) {
					count8++;
				}
				if (j == 8 && s.equals("1")) {
					count9++;
				}
				if (j == 9 && s.equals("1")) {
					count10++;
				}
				if (j == 10 && s.equals("1")) {
					count11++;
				}
				if (j == 11 && s.equals("1")) {
					count12++;
				}
			}
		}
		boolean oxystop = false;
		boolean co2stop = false;
		List<String> co2 = new ArrayList<>(Arrays.asList(input.split("\n")));
		List<String> oxy = new ArrayList<>(Arrays.asList(input.split("\n")));
		if (countfirst * 2 >= total) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(0)).equals("1")).collect(Collectors.toList());
			}
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(0)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(0)).equals("0")).collect(Collectors.toList());
			}
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(0)).equals("1")).collect(Collectors.toList());
			}
		}
		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy = countAtPosition(oxy, 1);
		int countCo2 = countAtPosition(co2, 1);
		if (countOxy * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(1)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(1)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo2 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(1)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(1)).equals("1")).collect(Collectors.toList());
			}
		}

		int countOxy3 = countAtPosition(oxy, 2);
		int countCo23 = countAtPosition(co2, 2);
		if (countOxy3 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(2)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(2)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo23 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(2)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(2)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy4 = countAtPosition(oxy, 3);
		int countCo24 = countAtPosition(co2, 3);
		if (countOxy4 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(3)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(3)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo24 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(3)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(3)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy5 = countAtPosition(oxy, 4);
		int countCo25 = countAtPosition(co2, 4);
		if (countOxy5 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(4)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(4)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo25 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(4)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(4)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy6 = countAtPosition(oxy, 5);
		int countCo26 = countAtPosition(co2, 5);
		if (countOxy6 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(5)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(5)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo26 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(5)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(5)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy7 = countAtPosition(oxy, 6);
		int countCo27 = countAtPosition(co2, 6);
		if (countOxy7 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(6)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(6)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo27 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(6)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(6)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy8 = countAtPosition(oxy, 7);
		int countCo28 = countAtPosition(co2, 7);
		if (countOxy8 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(7)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(7)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo28 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(7)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(7)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy9 = countAtPosition(oxy, 8);
		int countCo29 = countAtPosition(co2, 8);
		if (countOxy9 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(8)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(8)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo29 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(8)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(8)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy10 = countAtPosition(oxy, 9);
		int countCo210 = countAtPosition(co2, 9);
		if (countOxy10 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(9)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(9)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo210 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(9)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(9)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy11 = countAtPosition(oxy, 10);
		int countCo211 = countAtPosition(co2, 10);
		if (countOxy11 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(10)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(10)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo211 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(10)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(10)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}

		int countOxy12 = countAtPosition(oxy, 11);
		int countCo212 = countAtPosition(co2, 11);
		if (countOxy12 * 2 >= oxy.size()) {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(11)).equals("1")).collect(Collectors.toList());
			}
		} else {
			if (!oxystop) {
				oxy = oxy.stream().filter(st -> Character.toString(st.charAt(11)).equals("0")).collect(Collectors.toList());
			}
		}

		if (countCo212 * 2 >= co2.size()) {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(11)).equals("0")).collect(Collectors.toList());
			}
		} else {
			if (!co2stop) {
				co2 = co2.stream().filter(st -> Character.toString(st.charAt(11)).equals("1")).collect(Collectors.toList());
			}
		}

		if (oxy.size() == 1) {
			System.out.println(oxy);
			oxystop = true;
		}
		if (co2.size() == 1) {
			System.out.println(co2);
			co2stop = true;
		}







		int first = Integer.parseInt(co2.get(0), 2);
		int second = Integer.parseInt(oxy.get(0), 2);
		System.out.println(first * second);
	}

	static int countAtPosition(List<String> list, int position) {
		int count = 0;
		for (String str : list) {
			String s = Character.toString(str.charAt(position));
			if (s.equals("1")) {
				count++;
			}
		}
		return count;
	}
}
