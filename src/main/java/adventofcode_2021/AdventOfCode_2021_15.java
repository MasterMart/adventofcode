package adventofcode_2021;


import utils.AdventOfCodeUtil;

import java.util.*;
import java.util.stream.Collectors;

public class AdventOfCode_2021_15 {

	static String input = "9134437236318171116117288148911191769789149391998581842118486728495315197918969961726641911197278519\n" +
			"4266599972129377121978987858118144193371121224689932255439189962124983957264992917811528481174141159\n" +
			"4941264622844649255181863611661937989592573911314587911782284256729939692285214646949151417873145114\n" +
			"9945129815342473711424195426247119937972981595714311991417119392838691411867714292812665718171417224\n" +
			"1423818398213251171691473971673889569992131512132754569226823131415196188491991866258247115715611321\n" +
			"8271949774191463914431151294928179929172131829943916791618917131342352982182671917472939235329739287\n" +
			"1952694952277173514253513153118634151159329774821227939596521118915991151517398355228881788289998825\n" +
			"6294228718411191711731415119272125331883929678134156945112362831191869711861933445241916118268865925\n" +
			"2356988459435979847977978218396878179236826858228579488119689162193671247912113492191423992627295229\n" +
			"2111941153771299263815996117179768913916931152689617128191487833381948938691616718823312163299281129\n" +
			"9171226987969165893999355671387991712129929312892448326219555178861569689471513141379921621364122952\n" +
			"1249283311974145392919182141161915111428797238114236163511979989617362555346148769687595349142819111\n" +
			"9571153637692556311122411512417957975197837271859411582315253218891991115633697938928761345192119815\n" +
			"6911911719178156912898261314116923182117799319918261334615762427162794888182289172165471919659749491\n" +
			"5138941619256899722425914897278227859922169794121914729992557374347523328615137941489945927279892298\n" +
			"1691252769119353319251199741258446168371199133897657115794287829411223252993425141227229172926195991\n" +
			"4431947845795998941397452166121292427378268698276815598921157812421421921137439117762855115396211321\n" +
			"1412756891815118959881159821318921697175898788398954349771755161362198519611669783133198193528874868\n" +
			"9112427971395352891325118446527417451387398974497274794171961657481915243671945196458978948184534614\n" +
			"1252984992119991919443992419281218931751632496151245223815394764927248125111917191639415221892886327\n" +
			"5275881461396171768287168681176851922162133331972139186149383246278369457147977367987123251988139239\n" +
			"3155313932191132412999399385239196913239141225397279469965159917967896812911581351817198298381714458\n" +
			"8464311739148758223215553168996711382181221218285896362741211188733419177711385113999818871569458994\n" +
			"1879111627898539912854218917149885217579453695415812149191615172737921454619365138151192211263832184\n" +
			"1745287434814238973615122917959292149719727428287841339213292793511992466717722299721728324384289841\n" +
			"4119917831499159771215319299198921969441688115393251912979392649954159382215672649185991245667814867\n" +
			"8421899779299898935824114111781991991411972699748599694715611772821147161929899653114683282545695526\n" +
			"1391911761757955826198918825188872958214852918859954962451299229771599464484643431812976399151594211\n" +
			"7999299191226143344136335797291214258929751616148411628765219875949185336487232964441426796267617912\n" +
			"9312793471126411211319197241162921824154811118258812197295391233753951149972246192116499143192987292\n" +
			"4166762724111379882254285999918693852512391771491411962495421789918493222895245283519755983913436856\n" +
			"2963981682868141266469319124727698516761839935812991845875451292524746826223193197624842311169613222\n" +
			"6612255182641994167791551111348896911973163521891312524155251722964145239519186611192969965242913815\n" +
			"3812621525315137988179772883496249224315754451295212281139491173735522521919727818254843554645119381\n" +
			"4999158935552656126424919271681281222845174349586213875171837259468168544653738583124471131293191635\n" +
			"3181461832897859121599429871282449726143213119969341268912719652828419145751649491758911217661915157\n" +
			"2169192795931271344799317331232245363729244373498978114194323826954196691112529121721939918266141929\n" +
			"3241171999893699197731615971189489698196184156739628453726665161716169418115729142121813117496917312\n" +
			"9831982399979619227751246564122511222191768891641244418169396221146399559241628139113624784889111194\n" +
			"1155992956973218257113121742449819911282169221791685438834989831462311298934183898126817972689556913\n" +
			"2519898848973471121965719156724668633673521392182113214714862941331418991139359111131317972245927248\n" +
			"1118272518293161815811581122177733818141312931879171267424799872998965711214314214963634164128586931\n" +
			"2942442175915698691189261219221898849591485832258619654613715291299912115494527828561788132242817329\n" +
			"9134374827352131491917164116112919112787815595986821853713344183899964113211196119611514227791311992\n" +
			"9924299274183222692855629928987629693696499919678172652254115527315712512151391963112118896723831394\n" +
			"6779188289768247515714634371778114944931198991117156179591211247196718242116149269395151911696952519\n" +
			"6119956112724139655491921933667514145862512222356296111499316331983418167229798845792853586693717131\n" +
			"6372419768588511842299529371721979699214258298121849549534431753318493219659119917449983451931926192\n" +
			"3485612552714411976149279439751975283275376828619691946988338211527217167319996112545312398992879576\n" +
			"8911294845849625718666114889391259242715919185919258191919825363677319992889695151251781589282852117\n" +
			"4759389598841389431656112779112613727996898244974817841817673141882655234312237196313473494929711296\n" +
			"2517916235761217123817811121342199762378281252761996844994858638621799822625147911311996961937298294\n" +
			"8941194944727437278225493439462865186717416935129471145392629214119511179552917231612758179238812192\n" +
			"8613679516939369115354319882498579981182142179392359372494313198765131854838591291111497225594621291\n" +
			"1321812891162243718977896933879119675992957879218399616327481131591451932792366297113625996961715161\n" +
			"9919212621338919781697293391954682913289543115843443361296269489413995767817811241472294564151339898\n" +
			"1153111296993149893651924112964964498943984891792279823296848763161369826128828344762117588116482442\n" +
			"6123889111891594678393829789136113819817277539926913591976269942117982588817411692511994951496113514\n" +
			"3657811212317993965191682913498637567188187111117115621469178459598143491991792689755739933419117862\n" +
			"7314238428299521431289133119379941741813916137974192112136216716487266119929717625919112311493945899\n" +
			"4582259569619129439519515298935136921338659571725612321769129259399162831816521211675898518155647185\n" +
			"9337781751569517624916199381968246468135841277376892295935423361417921323271527491114899619766811929\n" +
			"6496894511398568413638937939142622175812611591219465278582322635169316643921142893963885889927221829\n" +
			"9318299299359253261579998597435658137417149721348299137634991118913481795889317121113338934128838629\n" +
			"6541881992577123981195284395322888211297894224491391962893439581761934194671147952725731481427916649\n" +
			"9311452111494252879933898891614768841261859962518671447799131599799521639754123258387678228943995311\n" +
			"7914972421955981118348969134195843411368511735627132149839112127893994123473952691819167912799723124\n" +
			"1148123817312136912725525155116195975886323391941888991939816715748973117421318917639921146511652985\n" +
			"1199179183175916316771119743618165114495659192195944588463122311315675991911843866795727192997866988\n" +
			"9337612411577132215565136169797995961321193921231868914489125228236861957111791121699917726559832713\n" +
			"1527861616446251369121672139925121545192136447182614449376627391866462621154311989436118329916169849\n" +
			"5988658341336525277657964159221299997699171286183921358327151183141825891152978939848511311271593926\n" +
			"1569247222134936917536456153929155118563335252391138515531339399219733451936875816329472261397159162\n" +
			"2899483829435817271833114149863318984981183561112229826192183676616452514124142991716196214798497919\n" +
			"9527213833937136521987411723376681985293899165175386716871819947959194632794697178923684119463547829\n" +
			"2854432958777866715317916915113811894364131583222426327295252996237937885931182736177587595356652826\n" +
			"9292791825572342998189238243481265143547123371145272499877211861289528149911866723621152144889164521\n" +
			"7812791799144112298119927111729999331915996374849222511786242989692145121139867622884136581416861877\n" +
			"2621697312859698611314954659879711998947319146163283382749226353492995814551983529319197719146319279\n" +
			"1181689782312573125995572776913895925171719598759894581282921836139182186977823977139988831937622188\n" +
			"1699371374339217977493799224337731169591838158994283944355214634111659452591451955335692953966318314\n" +
			"6921766478831113391177431172211315219799523578679981229512729591461641328367485691611299226369221868\n" +
			"1621183335128299162112113216382599938981412719143441119714219494571485175571363933181533696417218993\n" +
			"8111733123792914948924741644289258361929671131265585911491923132589853772112698247452955252652287195\n" +
			"4623565625343971711118316872971671351998386941178128117481951295674894929491113119859179268811672891\n" +
			"9119253898553912835191299992174182446119522826949624892968911122889389959979722346686641928178371515\n" +
			"1156979519211885312865297819159992638192941638151344933497157381518531741418311312939933873322996162\n" +
			"9119866992911469199934229138529227124588462935646719771117722149719163467299528793678922791293192756\n" +
			"5754112531261399382691549594226235781794322919551722626284861999719919938122995814891929128348195227\n" +
			"1476939511988755913262415929131918147129878942582826367868775152919383681939285969253767294271769221\n" +
			"4139838427281391394644889717526983869112349958311477333993331271264398181716117119671177353876357113\n" +
			"9395111963828795242322999743437188928311517327921181521397714214124992279711196564219515654423132714\n" +
			"5397995631493629229761241328349116889325332194211384536692587121267898922532891128293457732564197447\n" +
			"1428788229794345214842932733556277189861813158716216541114488155884118964521257399853593319713317954\n" +
			"6728345291621899178333839493777613181691411694427424287889116411916641242419499935762325669754616915\n" +
			"8483418822832213859522891811919124297212128149427761926241859462911148672547925611168174834274766844\n" +
			"9392994191381132573111791221994711714912329797688737955321919386929933869914697342139924761519959232\n" +
			"8913639328747941618998853389276157672143941321324374964653258173881963233275332569899861163971254537\n" +
			"2176921618954489827742992883331891265257528128915417961339186196593313933247197215741495622248115191\n" +
			"1921172993934749931619794374326831718362869432327311322223119167392126596357641716995181921555441215";


	static int horizontal = 0;
	static int depth = 0;
	static int aim = 0;

	static Set<AdventOfCodeUtil.Coordinate> coordinateList = new HashSet<>();
	static Set<AdventOfCodeUtil.Coordinate> hasSeen = new HashSet<>();

	public static void main(String... args) throws Exception {


		for (int i = 0; i < input.split("\n").length; i++) {
			String str = input.split("\n")[i];

			for (int j = 0; j < str.split("").length; j++) {

				String str2 = str.split("")[j];

				AdventOfCodeUtil.Coordinate coordinate = new AdventOfCodeUtil.Coordinate(j, i);
				if (coordinate.y == 0 && coordinate.x == 0) {
					coordinate.tentdist = 0;
				}
				coordinate.numberint = Integer.parseInt(str2);
				coordinateList.add(coordinate);
			}
		}
		List<AdventOfCodeUtil.Coordinate> newList = new ArrayList<>();
		for (int i = 1; i <= 4; i++) {
			for (AdventOfCodeUtil.Coordinate coordinate : coordinateList) {
				AdventOfCodeUtil.Coordinate coordinate1 = new AdventOfCodeUtil.Coordinate(coordinate.x + (i * 100), coordinate.y);
				int number = coordinate.numberint + i;
				if (number > 9) {
					number = number - 9;
				}
				coordinate1.numberint = number;
				newList.add(coordinate1);
			}
		}

		coordinateList.addAll(newList);

		newList = new ArrayList<>();
		for (int i = 1; i <= 4; i++) {
			for (AdventOfCodeUtil.Coordinate coordinate : coordinateList) {
				AdventOfCodeUtil.Coordinate coordinate1 = new AdventOfCodeUtil.Coordinate(coordinate.x, coordinate.y + (i * 100));
				int number = coordinate.numberint + i;
				if (number > 9) {
					number = number - 9;
				}
				coordinate1.numberint = number;
				newList.add(coordinate1);
			}
		}

		coordinateList.addAll(newList);

		Set<AdventOfCodeUtil.Coordinate> startLayer = new HashSet<>();
		AdventOfCodeUtil.Coordinate startCoordinate = new AdventOfCodeUtil.Coordinate(0, 0);
		startCoordinate.numberint = 9;
		startCoordinate.tentdist = 0;
		startLayer.add(startCoordinate);
		determineDijk();
	}

	static void determineDijk() {

		while (AdventOfCodeUtil.getCoordinate(499, 499, coordinateList).visited == false && hasSeen.size() < 250000) {

			System.out.println(hasSeen.size());

			AdventOfCodeUtil.Coordinate startCoordinate = findSmallest(coordinateList);

			for (AdventOfCodeUtil.Coordinate coordinate : AdventOfCodeUtil.getAdjacentNoVert(startCoordinate, coordinateList)) {
				if (hasSeen.contains(coordinate)) {
					continue;
				}

				if (coordinate.tentdist == null || coordinate.tentdist > coordinate.numberint + startCoordinate.tentdist) {
					coordinate.tentdist = coordinate.numberint + startCoordinate.tentdist;
				}
			}

			hasSeen.add(startCoordinate);
		}

		AdventOfCodeUtil.Coordinate coordinate = AdventOfCodeUtil.getCoordinate(499, 499, coordinateList);
		System.out.println(coordinate.tentdist);
	}

	public static AdventOfCodeUtil.Coordinate findSmallest(Set<AdventOfCodeUtil.Coordinate> coordinates) {
		int tentdist = 9999999;
		AdventOfCodeUtil.Coordinate smallestCoordinate = null;
		for (AdventOfCodeUtil.Coordinate coordinate : coordinates) {
			if (coordinate.tentdist != null && coordinate.tentdist < tentdist && !hasSeen.contains(coordinate)) {
				tentdist = coordinate.tentdist;
				smallestCoordinate = coordinate;
			}
		}

		return smallestCoordinate;
	}

//	static int determineRiskPath(AdventOfCodeUtil.Coordinate originallyStartedFrom, AdventOfCodeUtil.Coordinate end, Set<AdventOfCodeUtil.Coordinate> coordinateList, List<Integer> allTotals, List<AdventOfCodeUtil.Coordinate> seenCoordinates, AdventOfCodeUtil.Coordinate start, int total) {
//
//		List<AdventOfCodeUtil.Coordinate> seencopy = new ArrayList<>();
//		seencopy.addAll(seenCoordinates);
//
//		seencopy.add(start);
//
//		if (!start.equals(originallyStartedFrom)) {
//			total += start.numberint;
//		}
//
//		if (allTotals.size() > 0) {
//			int lowestRouteSoFar = Collections.min(allTotals);
//			if (total > lowestRouteSoFar) {
//				return total;
//			}
//		}
//
//		for (AdventOfCodeUtil.Coordinate coordinate: AdventOfCodeUtil.getAdjacentNoVert(start, coordinateList)) {
//
//			if (seencopy.contains(coordinate)) {
//				continue;
//			}
//
//			if (coordinate.equals(end)) {
//				total += coordinate.numberint;
//				allTotals.add(total);
//				continue;
//			}
//
//			determineRiskPath(originallyStartedFrom, end, coordinateList, allTotals, seencopy, coordinate, total);
//		}
//
//		return total;
//	}
//
//	public static void determineShortestForLayer(Set<AdventOfCodeUtil.Coordinate> prevLayer, int level, int maxlevel) throws Exception {
//
//		while (level <= maxlevel) {
//			System.out.println(level);
//
//			Set<AdventOfCodeUtil.Coordinate> nextLayer = new HashSet<>();
//			for (AdventOfCodeUtil.Coordinate coordinate : prevLayer) {
//				nextLayer.addAll(AdventOfCodeUtil.getAdjacentHigher(coordinate, coordinateList));
//			}
//			int finalLevel = level;
//			nextLayer = nextLayer.stream().filter(coordinate -> coordinate.x == finalLevel || coordinate.y == finalLevel).collect(Collectors.toSet());
//
//			for (AdventOfCodeUtil.Coordinate end : nextLayer) {
//
//				Set<AdventOfCodeUtil.Coordinate> toDetermine = new HashSet<>();
//				toDetermine.addAll(nextLayer);
//
//				List<AdventOfCodeUtil.Coordinate> seenTotals = new ArrayList<>();
//				List<Integer> allTotals2 = new ArrayList<>();
//				for (AdventOfCodeUtil.Coordinate start : prevLayer) {
//					toDetermine.add(start);
//					allTotals2 = new ArrayList<>();
//					determineRiskPath(start, end, toDetermine, allTotals2, seenTotals, start, 0);
//					if (allTotals2.size() > 0) {
//						int lowest = Collections.min(allTotals2);
//						if (start.shortestSoFar + lowest < end.shortestSoFar) {
//							end.shortestSoFar = start.shortestSoFar + lowest;
//						}
//					}
//				}
//			}
//			if (level == maxlevel) {
//				AdventOfCodeUtil.Coordinate coordinate = nextLayer.stream().filter(coordinate4 -> coordinate4.x == maxlevel && coordinate4.y == maxlevel).findFirst().get();
//				System.out.println(coordinate.shortestSoFar);
//				throw new Exception();
//			}
//			level ++;
//			prevLayer = nextLayer;
//
//		}


//	static class Route {
//		public List<AdventOfCodeUtil.Coordinate> coordinatesThisRoute;
//	}

}
