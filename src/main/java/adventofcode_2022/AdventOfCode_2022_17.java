package adventofcode_2022;


import utils.AdventOfCodeUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class AdventOfCode_2022_17 {

	static String wind = "><<<<><<>><<>><><<<>>><<<<>>>><<>>><>>><<<>><<<><<<><><><>>>><<>>><<<<>>><>><<<<>><><<<<>>><<<>>><<>><<<>>><>>>><<<<>>>><<<<><>><<<>>><<<<>><<<<>>>><<<<>>><<>>><<<>>><>>><<<<>>><<<<>>>><>>>><<>>><<><<<>>>><><<<<>>>><>><<>><<<><<<<>><<><<<<>>><>><<><<<>>><<<>>><<><<<<>><>><<<><<<>>>><>>>><<<>><<<<>>>><<<>>>><><<<<>>>><<<<>>>><<<<><<<>>>><><<<>>><<<><<><<<>>><<<><<>>>><<<>>>><<<>>><<><>>><<><>>>><><><<>>><<<>><<<>><><>>><<<>>><<<<><>><>>>><<><<<>>>><<><<<<>>><><<>>>><<<<>>>><<><<<<>><<><><>>>><<>><<>><<<<><>>><><<<>><<<>><><>>>><<<>><<<<>>><<><>>>><>>>><<<>>><<<<>>><><<<<>>><>>>><>>><<>>>><<>><<>>><<>><><>><<<<>>><<><<>><<<<><<<>>>><>>><>>><<<>>><<<>>>><<>>><<<<>><<>>>><><<<><>><<<><<<<>>><><<<><<<<>><>><<<<><<<>><>>><<<<>>>><<>>>><<<<>>><><<<>>><<<<><>><<<>><<<<><>>><>>>><<>>><<<>>>><<>>><><<<><<<<><<><>>>><><>>>><<>>><<<<>><<<<><<>>><<><<<><<<<>>><><<<>>>><>>>><<<><<<>><<><<<>>>><<<<>><><<<<>>>><<>>>><<>><<>><<<>><<<<>><>>><<<<>>>><><<>>><<>>><>>><<<<>>><<<<>>><<>><>><<<>><<<>>>><<<>>>><<>><<<><><>>><<<<>><<>>>><<><><<<><>>>><<<>><<<>>>><<<<><<>>><<>>>><<><<<<>><<>>><<<<>><>>><<>>>><<<<><><>>><<<<>>>><>>>><<>>>><<<<><<>><<<><<<>><<<>>>><<<><<<<>><<<<>><<<<>>>><<<>>>><>><<<>>>><<<>>><<><><<<>><<<>><>>><>><><<<<>><<<<>>>><<<>>><>>><<><><<>>>><<<<><><<<>>>><<>><<>>><<<<>>>><>>>><>><<<>><<<<>>>><><<><<>>>><<<>><<>>><<<<>><<>>><<<<>>>><<<>>><<<><>><<><>>>><<>>>><<<><>>><>>>><<<<>>><<<>><<>>><<<<><<<>>><<>>><<<<>>><<>><<<><>>><><>>>><<>>>><<>><<<<><<<>>><<<<>><<<>><>><<<>><>>><<<>>>><>><><<>>><<>>><<<>>><<>><<<<>>>><<>><<>>><<>>><<>>><<>><><<<>>>><>>>><><<<>>><>>><<<<>>><<<<><>>>><<<<><<><<<>>>><<<>><<<><><<<<>>><<>>><<<<>>>><<>>><<<><<<<>>>><<<<>><<<><<>>><>><<>><<<<>><>>>><<>><<<>>><<<><<>>><<<><<<<><<<<><<>><>>>><>><>><<>>><<<<>>>><<<<>>><<<<><<<<><<<><>>><>>><<<<>><<>>>><><>>><>>>><><>>>><<<>><<>><<<<><>>>><<<><<<<><>>>><<>>><<<>>>><<>>>><<<<><<<<>>>><<><<<<>><<<>><>>><<<<><<>><<<>>><>><<<<>>>><<>>><<<>>><>><<<>>>><>><<<><<<<>>><<<<>><<>>><<<>>>><<<>>><><<><<<><<>>>><<>>><<>>>><>>>><<<<><><>>>><<<>>><<<>>>><<>><<<<><<<>>><<<>>>><>><<>>><<<>>>><>><><<<<>>>><>><<<<>>>><<<<>><>>>><<><<<<>><><<<>>><<<<><<<<><>><>>>><<<>>>><<<>><<>>>><>><<<>>><<<>>><<<<>>><<<<><<>><<<<>><>>><>>><<>>><<<><<<<>>>><<<>>><<>>><<<<>><><<<>>>><><<<<>>><<<>>><<<>><<>>>><<>>><<<<>>><<>>><>>>><<>><<<>>>><<<<>>>><<<<><<><><<>>>><<<<><<>>><<<<>>><<<<>><<><>>><>><<>>>><<<<>><<<>>><<<<>><<>><<><<>>><<<>><<<>>>><<>>><<<>>>><<<<>>><<<<>><<>>>><<<>>>><>><<<<>>><>>><<><<>>>><<<>>><>>><<<>><<<<><><<<>>><<<><<<>><<<<><<<>><<<<>>>><>><>><>>>><<<><<<>>><<<><<<<>>>><<>>>><<<>><<>><<<<>><>><<<><<<<>><<<>>>><<>>>><<>>>><>>>><<<<>>><<>>>><<>>>><<>><<<>>><>>>><<<<><>>>><<<<><>>>><<<>>>><<<<>>><<<<>><><<<<>>><><>><<<<>>><<<>>><><<<>>>><<<>>>><<><<<<><<<<><<><<<<>>><>>>><<>>>><<<>>>><<<>>><<<<>>><>><<<><<<<>>>><<<<>>><<<<>>>><<<<><<<>><<<>>>><<<><<<<><>><<<<>><><<<>>><>><<<>>><<>><<>>><>><>>><<>>><<<>>>><>><<<>><<>>><<<<>>>><>><><<>><>><<<<><><<>>><<<<>>>><<>>><<<<>>><<<<><>>><<<>>>><<<<>>><<<>>>><<<>><<><><<<<>>><<>>>><<>>><<><<<<>>>><>><<>><<<<>><>>><<<<>><<>>>><<<<>>><<>><>><>><><<<>>>><<<>>><<>><><<>>>><<<>>><<<>>>><<<<><<<>><>>><>>>><<<<><<<<>>>><<<>><<<<><<<<>>><<<<>>>><>>><<<<>>>><<<>><<<>><<<>>><<<<>>><<<>>>><>>><><<>>><>>>><<>>><<>>>><<<>><<<><<>>><<>>>><<<<>><><<<<><<<>><>>>><<<<>>>><<<<>>><<<<><><>>>><<>><>>><<>>>><<>>>><<<<>>><><<>>><<<<><<<><<>>><>>><>><>>>><>><<<>>>><<>>><<<>>><<>><<<<>>><<>>><<><<<<><<>>>><<<<><>>>><<<>><<><<<<><<><<>>>><<><<<<>>><<>>><>><>>><>>>><>>>><<>><<<<><<<<>>>><>>><<>>>><<<<>>><<><<<<>>><<<<>><>>>><>><<<<>>><<>><<<>><<>>><<<<>>>><<<>>>><>>>><>>>><<<<><>>><>>>><<<>><>><<><<<><<>>>><<<<>><<>>><<>>><<<<>><<<<><<<>>>><<<>><<>>>><<<>>>><<><><<<<>>>><><<>>><<>>>><<<>>><<>><<><<<><<<>>>><><<<>>><<<<>><>>>><<<><<><<<<>>>><<><<<<>>>><<<>><><<>>>><>>>><<<<><<<><<<>>>><<>><>>><<<>>>><<>>>><>><<<><<><<<<>>>><<>>>><<<>><<>><<<<><<>><<<>>>><<><<<>>><<<<>>><<<<><<>><<<>>>><>>>><<<<>>><>><<<<>>>><<<><<<<>>>><<<>>>><<><<<<>>>><<<<><<>>>><<><<><>>><>>><>>><>>>><<<<><<<<>>>><>><<<<>><<<<>>><<<<>>>><>><<<>>>><>>>><>>>><<>>>><>><<<>><><<>><<>>><>><><>>>><>>>><>>>><<<>><<><<<<>>>><><>>><><>><>><<>>><<>><<>>><<<<><<<>>><<<<>>>><<<<><<<>>><<<<>>>><<<<>>>><>>><><>><<<<>>>><<<<>><<><><<<><<>><<<<>><<<>><<<>>><<<>><<<>><><<>>>><<<<><<>>>><<><<<>><<<<>>><<<>>><<<>><>><<<<>><<<<><<<<>><<<<><>>><<<<>><<<<>>><<<<><<><>><<<>><>>>><>>>><>>>><<<<>><<<<><<>>><>>>><<<<>>><<<><<<>>><<<>><<><<>>><<<>>>><<<>>>><<<<>><>>>><<<<>>><>>><<>>>><<>>>><>>><<<><>>><<<><>>>><<<<>>><<<>><<<>>>><<<<>>>><<><><><<<><<>>>><<<<><<<>><<>><<<<>>><<>>><<<><<<>>>><<>><>>><>>><<<<><<<>>><<<><<<><<<>><<>>><<><<>>>><<<<>>><<<>>>><<>><<<<>>>><<><<<<><<>>><<<><>>>><<<><<>>>><>>><<>>><<<<>><<>>>><<<>>><<<>>>><<<<>>>><<<><<<>>><<<><<<>>><<<<><<>>>><>>>><<<>>>><>>><>>>><<<>><<<<><<<<><<<<>><<<<><<<<><>><<><<<<>>><<<<>>><<>>><<<>>>><<<>>>><<<>><<<>><<<><<<>>><<>>>><><<<>><<<>>><<>><<<<><<>>><>><<<>>>><<<<>>>><<>>><<>><<><<<<><<<>>>><<<<>>>><<>>><<>><<<>>><>>>><<<>><>>>><<>>>><<<<>><<<<>>>><<>><>>><><<><<>>>><<>><<><>>>><<>><<<<>>>><>>><><<<<>>><<<<>>>><<>>>><<>>>><<<<>><<<>>><<>>><>>>><<<><<<><<<>><>><><>>>><<>><<<<>><<<<>><><>><<>>>><<<><<<><>>><<<>>><<<>>>><<<>>><<<>>>><>>>><<<>><>>>><<<>>>><<<>>>><<<<><>>>><<<<>>>><>>><<<>>><<>><<><<<>>>><<<>>>><<<>><>><<<<>><<<>><<<>>><<<<><<<<>>>><<<<>>><<<<>><<<<>><<><>>><<<>>><<<<><<<>>><<<<><>>><<<>>>><>>>><><<<<>>>><><>><<>>>><>>><<<<>>><<<>><>><<<<><<<<>>><><<<<>>>><>><>><<<<>><<>><<<<>><<>>><<>>><<<>>>><<>>><<>><<<<>>><<>>>><<><<>><<<<>>><<<<><<<<><<<><>>><<>><<<<><<<>>>><>>>><><<<><<><<<<>><<<>><>>>><<<<>><<><<<><<<<>>>><<<><<>>>><><<><<<<><<<<>>><<<<>>>><<>>><<<><<<>>>><><<>>>><><<><<<<><<>>>><><<>><<>><>>><<><<<>><<>>>><<<<><<<<><><>>>><<<<>>><<<<>>><<>>>><<<><<<>><<<>>>><<<<><<<<>><<<<>>><<<<>>><>>><<<><<><<<<>>>><>><<>>><>><<<<>>><>>>><<>>>><<<<><<>>><<<<><<>><><<>>>><>><<>><<<<>><<>><<<<><<<<>>>><<<>><<>>><<><<<<>>>><<<>>>><<>>>><>>><<<>>><><<>><<>>><>>><>>>><<>>><<<>>>><><<<<><<>><<<<>>>><>><<<<><<<<><<<<>>>><<<><<<<>><<<>>>><<<<>><>>>><>><<<<>><>>><><<<>><><<<<>>><>>><<<>>>><<<>><<<<><<><<<><>>><>>>><<>>>><<<<>>><>>>><>>>><<>><<>>><<<<>>><<>>><<>>>><<<><<>>>><<<<>><>><<<>>><<<<>>>><>>><<<>>>><<<>><<>><<>>>><<<>>><<<>>>><>><<>><<<<><>>>><>><<>><>><>><>><<<>><<><>>>><>>><<<<>>><<<>><<<<>><<<<>><><<<<><<<<>><<<<>>><<>>>><><<<<>><<<<>><<<<>><>><>>><<><<>>><<<><<<>>><>>><><<<>>>><<<<><<<>>>><<>><>>><<><<>><<<>><<<<><<<<>>><>>><<><<>>>><<<><<><<<<>>>><<<<><<>><>>><<<<><<<>>>><<>><<<><<<>>><>>>><>>><<>>><>>><<<<>><>>>><<><>>>><<<><<><<<<>>><<<>>>><<><><<>><<<<><<>><<><<<<>><<><<><<<<>><>><<<>>><<><<<>>><<<<>>><>>><><><<>>>><<><<<<><>><>>>><<<<><<<<>>><<<<>>>><>><<<>><<<>><<<<>>><<>>><<<<>>>><<<<>><<>><<>><<<<>><>>>><<><>>>><<<>>>><<<>><>>>><<<>>><<>>><<>><><<<<>>><<>><<<<>><<<><<>>><<<>>>><<>>><<>>>><<<<>>>><>>><><<<<>>><<<>>><<<>><<>>><<<<><<<>><<<>><<><>>><<<<><<>><<<<>><<><<><>>>><>>><<>>>><<<<>>><<><<<>><<<>>>><<>>>><>>>><<>><<<>>><>>>><<>><<<>>>><<<>><<<<>>>><<<<><<>>><>>><<<><<>><>>><>>><<<>><<<<>><<<>>><>><<<>><<<<>>><<><><<<<>><<<><<<<>>><>>>><<<><<<<>><<<>><<><<<>>>><<<<>><>>><<<>><<>>><<<>><<<>>>><<<>>><<<<><<>><><<<>>><<<<>>>><<>>><>>>><<>>><<<<>>><>><<<>><>><<<<>><<<<><<>>><<><<>>>><<<><>>>><<<>>><<<>>><<>><<<<>>><<>>>><<<<>>><<><<<>><<>>>><<<<><<<<>>>><<<<>>><<<>><<>>><<<><>>><<>>><><>>>><<>><>><<<<>>>><<<>>><<<<>>>><>><<<<>><<>><<<>>><<<<>>><<<>>><<>><<<>>>><<>>><<>><<<><<<>>><<>>><<<>>>><<<<>><<<<>><<<>>><<<>>><<>>>><<<<>>>><<><<<<><>><>>>><<><<>>><<<<><<<<>>>><>>><<<><>><<>>><<<<>>><<>>>><<<>>>><>>>><<<>><><<>>><<><<<>><<>><>>><<<<>><>>>><<>><>>><<<<>><<>>>><<><<<<>>>><<<>>><>>><<<><>>><>><<<<><>>>><<<<><<<<>>><>>><><<>>><<>>><><<<<><<<><>><>>>><<<>>>><><>><><>><<<<><<<><<<>>>><<<>>><<>>><<<>><<<><<>>><>>>><<><<>>>><<<<>><<>><>>><<<<>>><<<>>>><<<<>><<<<>>>><<>><<<>><<<>><<<>>>><<<<>>>><>><<<<>>>><><><>>><>>><<<>>><>><<<<>>>><<><<<>>>><<>>><<<><<<<>><<<><>>><<>>><<<<>>>><><<<<>><<<>><<<>><<<>><<>>>><<<>>>><<<>>><<<><<<><<<><<<<><>><<>>><><<<><<<>>><<<<>>>><<<>>><>>><><<<>><<<>>>><<><><<<<>>>><<><<<>>>><<<>>>><<><<<<>>>><<<><<<>>>><<>>>><<><><<<<>>><<<><<<><><<>>>><<>>>><<<>>>><<>><<><>>>><<<<>>>><<<<>>><<<<>><<<><<><>><<<>>>><>><>><<<<><><><><<<<>>><<<<>><<>><>><<>><<<>>>><<<>>>><<<<>>>><<<>><<<>>>><<>>>><<<><<<>>><>>><<<>>><<<<>>><<<<>>><>>><<<<>>><<<<>>><<<>><<<<><<<>>><<<<>><<<><<<>>><<<<>><<>><<<<><<<<><><>>><<>><><<<<>>>><<>>><<<>><<><><>>><>>>><>>>><<<<>>><<<<>>>><<>>><<<<><<<<>>>><<>><<<>>><<>>>><<<>><<<<>><><<<<>>><<>><<<<>>><<<<>>><>>><>>><<<<>>><<<<>>>><>>>><<<<>>><><<><>>>><><<<<>>><>>>><<>>>><<><<<<>>><<<>>>><<<>>><<<<>><<<><<<<><<<<>><<<>>>><<<<>>><<<><<<<>>><<<<>>><<>>><<<>>>><>>>><<>>><<<><<<><<<<>><<<<>>>><<>>><<<>>>><<<>><<<<><<<>>>><<<<>><<<<><<><<<<>>><<<>>>><<<><>><<<>><>><<>>><<><<<><><<<>><<>>>><<><>><<<>>><<>>>><>>>><<<<>>><<>>>><<>>><<>><<<><<<<><>>><<><<><>>><<<<>>>><<<>>>><<>>>><<<<>>>><<<><<<<><>>><<>><<<><<>>><>>><<<>>><<>>><<>>>><<><<<<>>><>><>><<<><<<<>><<<<>>>><>>><<>>>><<<<>><<>>>><<><>><<<>><<<><<<>>>><<>><<<>>><<<<>>><>>><>>><<<<>>>><<<>><<<>><<<<><<<>><<<>>><<>><<<>><<>><<<>>><<<<><<>>>><<><>><<>>><<<>>>><><>>>><>>>><><<<<>>>><<>><<>><>>>><<>><<>><<<<>><<>><<<<>>>><>><<<<><><>><<>><<<<>>><<<<>><<<><<<>><<<><<<>><<<<>>>><>>><<<>>>><<<>>>><<<>>>><<>>>><<>><>>>><<<>>><<<<>><>>><<<>><>>><<<>>>><<<<><>><<<<><<>>>><<<>>>><<<<>>><>>><<<<><<>><>>><<<>>><>>>><<<>>><<<>><><>><<>>><<<>><<<>><>><<>>><<<>>><><>>><<<>>>><<><>>><<>>>><<<<>>>><<<<>><<<<><<>>>><<<>><<>>>><<>>><<>>><<>>><<><<<<><<<>>><<<><>>><<<<><<<>>>><<<>>>><<<<><<>>>><<<>><<<>>>><<<<>>>><<<<>>><>>><<><<<><<<>>><<<<>>>><<<<>>>><<><><<<<>>>><<>><<<<>>><<<>><>>><<<>>><>><<<>>><>><<<><<>><>>><<<>><<>><>><<>>><>><<<><<<>>><<<<>><<<<>>><>>>><<<<><<<<>>>><>>><><<<<>>><<<<>>>><>><<>>>><<<<>>><<<<>><><<>>>><<>>><<<<>><<<>>><<<><<<<>>>><>><<>>><<>>><>>><<>>><<>><<<<>><<>>>><<<<>><<>>><<>><<>>><>>><<<>>>><<<>>>><<<<>>><>><<<>>><<<><<>>>><><<<>>>><<>><<>>>><>>><<>>>><><<>>><<<><>><<<>><>>>><>>>><<<>><<>>>><>><<>>>><<>><<<<>>>><<<<><>>><>>>><<>><<><<<><<><<<<>>><<<<>>>><<>><<>>><><<<>><>>>><<<>>><><<><<<>>><<<<>>><>>><<><<><<>><>><<><<>>><<<<";

	static int prev = 0;
	static int prevwindindex = 0;
	static int prevu = 0;

	static int prevmin = 0;
	static String rocks = "####\n" +
			"\n" +
			".#.\n" +
			"###\n" +
			".#.\n" +
			"\n" +
			"..#\n" +
			"..#\n" +
			"###\n" +
			"\n" +
			"#\n" +
			"#\n" +
			"#\n" +
			"#\n" +
			"\n" +
			"##\n" +
			"##";
	public static void main(String... args) {
		int total = 0;

		List<AdventOfCodeUtil.Coordinate> fallen = new ArrayList<>();

		List<AdventOfCodeUtil.Coordinate> floorwall = new ArrayList<>();
		floorwall.add(new AdventOfCodeUtil.Coordinate(1, 0));
		floorwall.add(new AdventOfCodeUtil.Coordinate(2, 0));
		floorwall.add(new AdventOfCodeUtil.Coordinate(3, 0));
		floorwall.add(new AdventOfCodeUtil.Coordinate(4, 0));
		floorwall.add(new AdventOfCodeUtil.Coordinate(5, 0));
		floorwall.add(new AdventOfCodeUtil.Coordinate(6, 0));
		floorwall.add(new AdventOfCodeUtil.Coordinate(7, 0));
		fallen.addAll(floorwall);

		List<List<AdventOfCodeUtil.Coordinate>> rockss = new ArrayList<>();

		for (String s : rocks.split("\n\n")) {
			if (s.equals("\n")) {
				continue;
			}
			List<AdventOfCodeUtil.Coordinate> rockz = new ArrayList<>();
			for (int j = 0; j < s.split("\n").length; j++) {
				String u = s.split("\n")[j];

				for (int o = 0; o < u.split("").length; o++) {
					String y = u.split("")[o];
					if (y.equals("#")) {
						AdventOfCodeUtil.Coordinate coordinate = new AdventOfCodeUtil.Coordinate(o, s.split("\n").length - j - 1);
						rockz.add(coordinate);
					}
				}
			}
			rockss.add(rockz);
		}
		int windindex = 0;
		for (int u = 0; u < 100000; u++) {
			List<AdventOfCodeUtil.Coordinate> rock = rockss.get(u % 5);
			List<AdventOfCodeUtil.Coordinate> newRock = determineStart(rock, fallen.stream().map(coordinate -> coordinate.y).max(Integer::compare).orElse(0));
			while (true) {


				String windnow = wind.split("")[windindex % wind.length()];
				if (windnow.equals(">")) {
					if (canMoveright(newRock, fallen)) {
						newRock = moveRight(newRock);
					}
				}
				if (windnow.equals("<")) {
					if (canMoveLeft(newRock, fallen)) {
						newRock = moveLeft(newRock);
					}
				}
				windindex++;
				if (windindex % wind.length() == 0) {
					System.out.println(u - prevu);
					prevu = u;
					System.out.println(fallen.stream().map(coordinate -> coordinate.y).max(Integer::compare).get() - prevwindindex);
					prevwindindex = fallen.stream().map(coordinate -> coordinate.y).max(Integer::compare).get();
				}

				if (canMoveDown(newRock, fallen)) {
					newRock = moveDown(newRock);
				} else {
					fallen.addAll(newRock);
					List<Integer> ys = new ArrayList<>();
					int min = 0;
					for (int i = 1; i <= 7; i++) {
						int finalI = i;
						List<AdventOfCodeUtil.Coordinate> coordinates = fallen.stream().filter(coordinate -> coordinate.x == finalI).collect(Collectors.toList());
						int maxy = coordinates.stream().map(coordinate -> coordinate.y).max(Integer::compare).orElse(0);
						ys.add(maxy);
						min = ys.stream().min(Integer::compare).orElse(0);
					}
					if (min != prevmin) {
						int finalMin = min;
						fallen = fallen.stream().filter(coordinate -> coordinate.y >= finalMin - 100).collect(Collectors.toList());
						prevmin = min;
					}
					break;
				}
			}

//			System.out.println(fallen.stream().map(coordinate -> coordinate.y).max(Integer::compare).get() - prev);
//			prev = fallen.stream().map(coordinate -> coordinate.y).max(Integer::compare).get();
//
			if (u == 1739 + 1016) {
				System.out.println(4);
			}
//
//
			long tocalc = 1000000000000L - 1739;
			long totala = 2754;

			long divide = tocalc / 1745;
			totala += (divide * 2767) + 1589;
			System.out.println(totala);
		}
	}

	static List<AdventOfCodeUtil.Coordinate> determineStart(List<AdventOfCodeUtil.Coordinate> rock, int min) {


		List<AdventOfCodeUtil.Coordinate> coordinates = new ArrayList<>();
		for (AdventOfCodeUtil.Coordinate coordinate: rock) {
			coordinates.add(new AdventOfCodeUtil.Coordinate(coordinate.x, coordinate.y));
		}


		for (AdventOfCodeUtil.Coordinate coordinate: coordinates) {
			coordinate.x = coordinate.x + 3;
			coordinate.y = coordinate.y + min + 4;
		}
		return coordinates;
	}

	static List<AdventOfCodeUtil.Coordinate> moveDown(List<AdventOfCodeUtil.Coordinate> rock) {

		List<AdventOfCodeUtil.Coordinate> coordinates = new ArrayList<>(rock);

		for (AdventOfCodeUtil.Coordinate coordinate: coordinates) {
			coordinate.y = coordinate.y - 1;
		}
		return coordinates;
	}

	static List<AdventOfCodeUtil.Coordinate> moveLeft(List<AdventOfCodeUtil.Coordinate> rock) {

		List<AdventOfCodeUtil.Coordinate> coordinates = new ArrayList<>(rock);
		for (AdventOfCodeUtil.Coordinate coordinate: coordinates) {
			coordinate.x = coordinate.x - 1;
		}
		return coordinates;
	}

	static List<AdventOfCodeUtil.Coordinate> moveRight(List<AdventOfCodeUtil.Coordinate> rock) {

		List<AdventOfCodeUtil.Coordinate> coordinates = new ArrayList<>(rock);

		for (AdventOfCodeUtil.Coordinate coordinate: coordinates) {
			coordinate.x = coordinate.x + 1;
		}
		return coordinates;
	}

	static boolean canMoveDown(List<AdventOfCodeUtil.Coordinate> rock, List<AdventOfCodeUtil.Coordinate> fallen) {
		for (AdventOfCodeUtil.Coordinate coordinate: rock) {
			if (fallen.stream().anyMatch(coordinate1 -> coordinate1.x == coordinate.x && coordinate1.y == coordinate.y - 1)) {
				return false;
			}
		}
		return true;
	}

	static boolean canMoveLeft(List<AdventOfCodeUtil.Coordinate> rock, List<AdventOfCodeUtil.Coordinate> fallen) {
		if (rock.stream().anyMatch(coordinate -> coordinate.x == 1)) {
			return false;
		}

		for (AdventOfCodeUtil.Coordinate coordinate: rock) {
			if (fallen.stream().anyMatch(coordinate1 -> coordinate1.x == coordinate.x - 1 && coordinate1.y == coordinate.y)) {
				return false;
			}
		}
		return true;
	}

	static boolean canMoveright(List<AdventOfCodeUtil.Coordinate> rock, List<AdventOfCodeUtil.Coordinate> fallen) {

		if (rock.stream().anyMatch(coordinate -> coordinate.x == 7)) {
			return false;
		}

		for (AdventOfCodeUtil.Coordinate coordinate: rock) {
			if (fallen.stream().anyMatch(coordinate1 -> coordinate1.x == coordinate.x + 1 && coordinate1.y == coordinate.y)) {
				return false;
			}
		}
		return true;
	}
}
